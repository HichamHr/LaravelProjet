<?php
/**
 * Created by PhpStorm.
 * User: Charif
 * Date: 27/03/2016
 * Time: 06:53
 */

namespace app\OpenTest;


use Illuminate\Http\Request;

use Validator;

class Validation
{
    /**
     * @param Request $request
     * @return bool|\Illuminate\Support\MessageBag
     */
    public static function register(Request $request){
        $v = Validator::make($request->all(), [
            'CIN' => 'required|unique:etudiant|unique:prof|unique:admin',
            'email' => 'required|unique:comptes|email',
            'user' => 'required|unique:comptes|min:5',
            'phone' => 'required|unique:comptes',
            'role' => 'required',
            'password' => 'required|min:5|confirmed',
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function ProfileUpdate(Request $request){
        $v = Validator::make($request->all(), [
            'CIN' => 'required',
            'Nom' => 'required',
            'Prenom' => 'required',
            'Adresse' => '',
            'Avatar' => '',
            'id_specialite' => 'required|exists:specialite,id',
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Exame(Request $request){
        $v = Validator::make($request->all(), [
            'description' => '',
            'pile' => 'required|exists:piles,id',
            'type' => 'in:Blanche,officiel'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Passage(Request $request){
        $v = Validator::make($request->all(), [
            'exam_ID' => 'required|exists:exams,id',
            'Question' => 'required|exists:questions,question_ID',
            'Rep' => 'required|exists:reponses,id'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Specialite(Request $request){
        $v = Validator::make($request->all(), [
            'abbreviation' => 'required|unique:specialite|min:2|max:8',
            'intitule' => 'required|unique:specialite'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Piles(Request $request){
        $v = Validator::make($request->all(), [
            'Description' => 'required|min:20|max:250',
            'duree' => 'required|numeric',
            'Max_Score' => 'required|numeric',
            'valide_Score' => 'required|numeric',
            'module_ID' => 'required|exists:modules,numero',
            'prof' => 'required|exists:prof,CIN'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Questions(Request $request){
        $v = Validator::make($request->all(), [
            'Question' => 'required|min:5|max:250',
            'Type' => 'required',
            'Score' => 'required|numeric',
            'Pile_ID' => 'required|exists:piles,id'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Reponses(Request $request){
        $v = Validator::make($request->all(), [
            'reponse' => 'required|min:1|max:250',
            'is_true' => 'required',
            'Question_id' => 'required|exists:questions,question_ID'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Modules(Request $request){
        $v = Validator::make($request->all(), [
            'nom' => 'required|min:5',
            'MH' => 'required',
            'specialite' => 'required|exists:specialite,id'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }

    public static function Avatar(Request $request){
        $v = Validator::make($request->all(), [
            'image' => 'image|required'
        ]);

        if ($v->fails()) {return $v->errors();}
        return "done";
    }
}